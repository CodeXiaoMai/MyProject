<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="code_recycler">
        ""
                "public class RecyclerViewActivity extends BaseActivity {\n"
                "\n"
                "    @BindView(R.id.bt_recyclerview_add)\n"
                "    Button btRecyclerviewAdd;\n"
                "\n"
                "    @BindView(R.id.bt_recyclerview_delete)\n"
                "    Button btRecyclerviewDelete;\n"
                "\n"
                "    @BindView(R.id.bt_recyclerview_list)\n"
                "    Button btRecyclerviewList;\n"
                "\n"
                "    @BindView(R.id.bt_recyclerview_grad)\n"
                "    Button btRecyclerviewGrad;\n"
                "\n"
                "    @BindView(R.id.bt_recyclerview_flow)\n"
                "    Button btRecyclerviewFlow;\n"
                "\n"
                "    @BindView(R.id.rl_recyclerview)\n"
                "    RecyclerView rlRecyclerView;\n"
                "\n"
                "    private List&lt;String&gt; datas;\n"
                "\n"
                "    private MyRecyclerViewAdapter mAdapter;\n"
                "\n"
                "    @Override\n"
                "    protected void initViews() {\n"
                "        super.initViews();\n"
                "        setTitle(\"RecyclerView\");\n"
                "\n"
                "        // 设置RecyclerView的适配器\n"
                "        mAdapter = new MyRecyclerViewAdapter(mContext, datas);\n"
                "        rlRecyclerView.setAdapter(mAdapter);\n"
                "        rlRecyclerView.setLayoutManager(new LinearLayoutManager(mContext, LinearLayoutManager.VERTICAL, false));\n"
                "        rlRecyclerView.addItemDecoration(\n"
                "                new DividerItemDecoration(this, DividerItemDecoration.VERTICAL_LIST));\n"
                "        mAdapter.setOnItemClickListener(new MyRecyclerViewAdapter.OnItemClickListener() {\n"
                "            @Override\n"
                "            public void onItemClick(View view, String data) {\n"
                "                Toast.makeText(RecyclerViewActivity.this, \"data ==\" + data, Toast.LENGTH_SHORT)\n"
                "                        .show();\n"
                "            }\n"
                "        });\n"
                "        rlRecyclerView.setItemAnimator(new DefaultItemAnimator());\n"
                "    }\n"
                "\n"
                "    @Override\n"
                "    protected void initVariables() {\n"
                "        super.initVariables();\n"
                "        datas = new ArrayList&lt;&gt;();\n"
                "        for (int i = 0; i &lt; 100; i++) {\n"
                "            datas.add(\"Content_\" + i);\n"
                "        }\n"
                "    }\n"
                "\n"
                "    @Override\n"
                "    protected int getCodeResId() {\n"
                "        return super.getCodeResId();\n"
                "    }\n"
                "\n"
                "    @Override\n"
                "    protected int getContentLayout() {\n"
                "        return R.layout.activity_recyclerview;\n"
                "    }\n"
                "\n"
                "    @OnClick({\n"
                "            R.id.bt_recyclerview_add, R.id.bt_recyclerview_delete, R.id.bt_recyclerview_list,\n"
                "            R.id.bt_recyclerview_grad, R.id.bt_recyclerview_flow\n"
                "    })\n"
                "    public void onClick(View view) {\n"
                "        switch (view.getId()) {\n"
                "            case R.id.bt_recyclerview_add:\n"
                "                mAdapter.addData(0, \"new data\");\n"
                "                rlRecyclerView.scrollToPosition(0);\n"
                "                break;\n"
                "            case R.id.bt_recyclerview_delete:\n"
                "                mAdapter.removeData(2);\n"
                "                break;\n"
                "            // 设置List类型效果\n"
                "            case R.id.bt_recyclerview_list:\n"
                "                // LayoutManager\n"
                "                // rlRecyclerView.setLayoutManager(\n"
                "                // new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL,\n"
                "                // false));\n"
                "                rlRecyclerView.setLayoutManager(\n"
                "                        new LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false));\n"
                "                // 设置位置到末尾\n"
                "                // rlRecyclerView.scrollToPosition(datas.size() - 1);\n"
                "                break;\n"
                "            // 设置Grid类型效果\n"
                "            case R.id.bt_recyclerview_grad:\n"
                "                rlRecyclerView.setLayoutManager(\n"
                "                        new GridLayoutManager(mContext, 3, GridLayoutManager.VERTICAL, false));\n"
                "                break;\n"
                "            // 设置瀑布流效果\n"
                "            case R.id.bt_recyclerview_flow:\n"
                "                rlRecyclerView.setLayoutManager(\n"
                "                        new StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL));\n"
                "                break;\n"
                "        }\n"
                "    }\n"
                "}\n"




                "public class MyRecyclerViewAdapter\n"  
                    "        extends RecyclerView.Adapter&lt;MyRecyclerViewAdapter.MyViewHolder&gt; {\n"  
                    "\n"  
                    "    private Context context;\n"  
                    "\n"  
                    "    private List&lt;String> datas;\n"  
                    "\n"  
                    "    /**\n"  
                    "     * 添加数据\n"  
                    "     * \n"  
                    "     * @param position\n"  
                    "     * @param data\n"  
                    "     */\n"  
                    "    public void addData(int position, String data) {\n"  
                    "        datas.add(position, data);\n"  
                    "        notifyItemInserted(position);\n"  
                    "    }\n"  
                    "\n"  
                    "    /**\n"  
                    "     * 移除数据\n"  
                    "     * \n"  
                    "     * @param position\n"  
                    "     */\n"  
                    "    public void removeData(int position) {\n"  
                    "        // 防止数组越界\n"  
                    "        if (datas.size() > position) {\n"  
                    "            datas.remove(position);\n"  
                    "            notifyItemRemoved(position);\n"  
                    "        }\n"  
                    "    }\n"  
                    "\n"  
                    "    /**\n"  
                    "     * 点击RecyclerView某条的监听\n"  
                    "     */\n"  
                    "    public interface OnItemClickListener {\n"  
                    "        void onItemClick(View view, String data);\n"  
                    "    }\n"  
                    "\n"  
                    "    private OnItemClickListener listener;\n"  
                    "\n"  
                    "    public void setOnItemClickListener(OnItemClickListener listener) {\n"  
                    "        this.listener = listener;\n"  
                    "    }\n"  
                    "\n"  
                    "    public MyRecyclerViewAdapter(Context context, List&lt;String&gt; datas) {\n"  
                    "        this.context = context;\n"  
                    "        this.datas = datas;\n"  
                    "    }\n"  
                    "\n"  
                    "    /**\n"  
                    "     * 相当于getView方法中创建View和ViewHolder\n"  
                    "     *\n"  
                    "     * @param parent\n"  
                    "     * @param viewType\n"  
                    "     * @return\n"  
                    "     */\n"  
                    "    @Override\n"  
                    "    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n"  
                    "        View itemView = View.inflate(context, R.layout.item_recyclerview, null);\n"  
                    "        return new MyViewHolder(itemView);\n"  
                    "    }\n"  
                    "\n"  
                    "    /**\n"  
                    "     * 数据和View绑定\n"  
                    "     *\n"  
                    "     * @param holder\n"  
                    "     * @param position\n"  
                    "     */\n"  
                    "    @Override\n"  
                    "    public void onBindViewHolder(MyViewHolder holder, int position) {\n"  
                    "        // 根据位置得到对应的数据\n"  
                    "        String data = datas.get(position);\n"  
                    "        holder.tv_title.setText(data);\n"  
                    "    }\n"  
                    "\n"  
                    "    @Override\n"  
                    "    public int getItemCount() {\n"  
                    "        return datas == null ? 0 : datas.size();\n"  
                    "    }\n"  
                    "\n"  
                    "    class MyViewHolder extends RecyclerView.ViewHolder {\n"  
                    "\n"  
                    "        private ImageView iv_icon;\n"  
                    "\n"  
                    "        private TextView tv_title;\n"  
                    "\n"  
                    "        public MyViewHolder(View itemView) {\n"  
                    "            super(itemView);\n"  
                    "            iv_icon = (ImageView) itemView.findViewById(R.id.iv_icon);\n"  
                    "            tv_title = (TextView) itemView.findViewById(R.id.tv_title);\n"  
                    "\n"  
                    "            itemView.setOnClickListener(new View.OnClickListener() {\n"  
                    "                @Override\n"  
                    "                public void onClick(View v) {\n"  
                    "                    if (listener != null) {\n"  
                    "                        listener.onItemClick(v, datas.get(getLayoutPosition()));\n"  
                    "                    }\n"  
                    "                }\n"  
                    "            });\n"  
                    "        }\n"  
                    "    }\n"  
                    "}\n"
    </string>
</resources>