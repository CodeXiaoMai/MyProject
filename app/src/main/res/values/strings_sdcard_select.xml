<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="code_sdcard_select">
                    "\n" 
            "package com.xiaomai.myproject.activity;\n" 
            "\n" 
            "import android.content.Context;\n" 
            "import android.os.Build;\n" 
            "import android.os.Bundle;\n" 
            "import android.os.Environment;\n" 
            "import android.os.storage.StorageManager;\n" 
            "import android.util.SparseArray;\n" 
            "import android.view.View;\n" 
            "import android.widget.Button;\n" 
            "import android.widget.ImageView;\n" 
            "import android.widget.LinearLayout;\n" 
            "import android.widget.TextView;\n" 
            "\n" 
            "import com.xiaomai.myproject.R;\n" 
            "import com.xiaomai.myproject.base.BaseActivity;\n" 
            "import com.xiaomai.myproject.utils.FileUtils;\n" 
            "import com.xiaomai.myproject.view.MyToast;\n" 
            "\n" 
            "import java.lang.reflect.InvocationTargetException;\n" 
            "\n" 
            "import rx.Observable;\n" 
            "import rx.Subscriber;\n" 
            "import rx.android.schedulers.AndroidSchedulers;\n" 
            "import rx.functions.Action1;\n" 
            "import rx.schedulers.Schedulers;\n" 
            "\n" 
            "public class SdCardSelectActivity extends BaseActivity implements View.OnClickListener {\n" 
            "\n" 
            "    private TextView tv_sd_card;\n" 
            "\n" 
            "    private SparseArray&lt;String&gt; sparseArray;\n" 
            "\n" 
            "    private TextView tv_primary_storage;\n" 
            "\n" 
            "    private LinearLayout ll_sd_card;\n" 
            "\n" 
            "    private LinearLayout ll_primary_storage;\n" 
            "\n" 
            "    private ImageView iv_primary_storage;\n" 
            "\n" 
            "    private ImageView iv_sd_card;\n" 
            "\n" 
            "    private String mPath;\n" 
            "\n" 
            "    private Button bt_sd_card;\n" 
            "\n" 
            "    @Override\n" 
            "    protected void onCreate(Bundle savedInstanceState) {\n" 
            "        super.onCreate(savedInstanceState);\n" 
            "    }\n" 
            "\n" 
            "    @Override\n" 
            "    protected int getContentLayout() {\n" 
            "        return R.layout.activity_sd_card_check;\n" 
            "    }\n" 
            "\n" 
            "    @Override\n" 
            "    protected void initViews() {\n" 
            "        super.initViews();\n" 
            "        setTitle(\"SD卡选择\");\n" 
            "        // 当Sdk版本大于等于4.4时，若要向Sd卡中写入数据，只能向Android/data/[包名]/目录中写入，\n" 
            "        // 调用getExternalFilesDirs();系统自动创建该目录，app没有权限创建。\n" 
            "        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n" 
            "            getExternalFilesDirs(null);\n" 
            "        }\n" 
            "        ll_sd_card = (LinearLayout) findViewById(R.id.ll_sd_card);\n" 
            "        ll_primary_storage = (LinearLayout) findViewById(R.id.ll_primary_storage);\n" 
            "        tv_primary_storage = (TextView) findViewById(R.id.tv_primary_storage);\n" 
            "        tv_sd_card = (TextView) findViewById(R.id.tv_sd_card);\n" 
            "        iv_primary_storage = (ImageView) findViewById(R.id.iv_primary_storage);\n" 
            "        iv_sd_card = (ImageView) findViewById(R.id.iv_sd_card);\n" 
            "        bt_sd_card = (Button) findViewById(R.id.bt_sd_card);\n" 
            "        bt_sd_card.setOnClickListener(this);\n" 
            "        sparseArray = scanStorage();\n" 
            "        if (sparseArray == null || sparseArray.size() &lt;= 0) {\n" 
            "            return;\n" 
            "        }\n" 
            "        mPath = sparseArray.get(0);\n" 
            "        ll_primary_storage.setOnClickListener(this);\n" 
            "        if (sparseArray.size() >= 2) {\n" 
            "            ll_sd_card.setVisibility(View.VISIBLE);\n" 
            "            ll_sd_card.setOnClickListener(this);\n" 
            "        }\n" 
            "        for (int i = 0; i &lt; sparseArray.size(); i++) {\n" 
            "            final int finalI = i;\n" 
            "            Observable.create(new Observable.OnSubscribe&lt;String&gt;() {\n" 
            "                @Override\n" 
            "                public void call(Subscriber&lt;? super String&gt; subscriber) {\n" 
            "                    subscriber.onStart();\n" 
            "                    subscriber.onNext(\"剩余:\"\n" 
            "                            + FileUtils.formatSize(\n" 
            "                                    FileUtils.getDirAvailableSize(sparseArray.get(finalI)))\n" 
            "                            + \"/总量:\" + FileUtils.formatSize(\n" 
            "                                    FileUtils.getDirTotalSize(sparseArray.get(finalI))));\n" 
            "                    subscriber.onCompleted();\n" 
            "                }\n" 
            "            }).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread())\n" 
            "                    .subscribe(new Action1&lt;String&gt;() {\n" 
            "                        @Override\n" 
            "                        public void call(String s) {\n" 
            "                            if (finalI == 0) {\n" 
            "                                tv_primary_storage.setText(s);\n" 
            "                            } else if (finalI == 1) {\n" 
            "                                tv_sd_card.setText(s);\n" 
            "                            }\n" 
            "                        }\n" 
            "                    });\n" 
            "        }\n" 
            "    }\n" 
            "\n" 
            "    /**\n" 
            "     * 扫描存储设备\n" 
            "     * \n" 
            "     * @return\n" 
            "     */\n" 
            "    private SparseArray&lt;String&gt; scanStorage() {\n" 
            "        SparseArray&lt;String&gt; sparseArray = new SparseArray&lt;&gt;();\n" 
            "//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n" 
            "//            // 这种方式获取到的都是Android/data/[包名]目录/files\n" 
            "//            File[] externalFilesDirs = getExternalFilesDirs(null);\n" 
            "//            if (externalFilesDirs == null) {\n" 
            "//                return sparseArray;\n" 
            "//            } else {\n" 
            "//                for (int i = 0; i &lt; externalFilesDirs.length; i++) {\n" 
            "//                    sparseArray.append(i, externalFilesDirs[i].getAbsolutePath());\n" 
            "//                    // /storage/emulated/0/Android/data/com.xiaomai.myproject/files\n" 
            "//                    // /storage/extSdCard/Android/data/com.xiaomai.myproject/files\n" 
            "//                }\n" 
            "//            }\n" 
            "//            return sparseArray;\n" 
            "//        }\n" 
            "\n" 
            "        final StorageManager storageManager = (StorageManager) getSystemService(\n" 
            "                Context.STORAGE_SERVICE);\n" 
            "        try {\n" 
            "            String[] paths = (String[]) storageManager.getClass().getMethod(\"getVolumePaths\")\n" 
            "                    .invoke(storageManager);\n" 
            "            for (int i = 0; i &lt; paths.length; i++) {\n" 
            "                String status = (String) storageManager.getClass()\n" 
            "                        .getMethod(\"getVolumeState\", String.class).invoke(storageManager, paths[i]);\n" 
            "                if (Environment.MEDIA_MOUNTED.equals(status)) {\n" 
            "                    sparseArray.append(i, paths[i]);\n" 
            "                }\n" 
            "            }\n" 
            "        } catch (IllegalAccessException e) {\n" 
            "            e.printStackTrace();\n" 
            "        } catch (InvocationTargetException e) {\n" 
            "            e.printStackTrace();\n" 
            "        } catch (NoSuchMethodException e) {\n" 
            "            e.printStackTrace();\n" 
            "        }\n" 
            "        return sparseArray;\n" 
            "    }\n" 
            "\n" 
            "    @Override\n" 
            "    public void onClick(View v) {\n" 
            "        switch (v.getId()) {\n" 
            "            case R.id.ll_primary_storage:\n" 
            "                iv_primary_storage.setVisibility(View.VISIBLE);\n" 
            "                iv_sd_card.setVisibility(View.GONE);\n" 
            "                mPath = sparseArray.get(0);\n" 
            "                break;\n" 
            "            case R.id.ll_sd_card:\n" 
            "                iv_primary_storage.setVisibility(View.GONE);\n" 
            "                iv_sd_card.setVisibility(View.VISIBLE);\n" 
            "                mPath = sparseArray.get(1);\n" 
            "                break;\n" 
            "            case R.id.bt_sd_card:\n" 
            "                copyFile();\n" 
            "                break;\n" 
            "        }\n" 
            "        MyToast.show(mContext, mPath);\n" 
            "    }\n" 
            "\n" 
            "    private void copyFile() {\n" 
            "        Observable.create(new Observable.OnSubscribe&lt;Boolean&gt;() {\n" 
            "            @Override\n" 
            "            public void call(Subscriber&lt;? super Boolean&gt; subscriber) {\n" 
            "                boolean copy = FileUtils.copy(Environment.getExternalStorageDirectory().getPath() + \"/1.apk\",\n" 
            "                        mPath + \"/Android/data/\" + getPackageName() + \"/files/1.apk\", true);\n" 
            "                subscriber.onNext(copy);\n" 
            "                subscriber.onCompleted();\n" 
            "            }\n" 
            "        }).\n" 
            "                subscribeOn(Schedulers.io())\n" 
            "                .observeOn(AndroidSchedulers.mainThread())\n" 
            "                .subscribe(new Action1&lt;Boolean&gt;() {\n" 
            "                    @Override\n" 
            "                    public void call(Boolean bool) {\n" 
            "                        if (bool) MyToast.show(mContext, \"拷贝成功\");\n" 
            "                        else MyToast.show(mContext, \"拷贝失败\");\n" 
            "                    }\n" 
            "                });\n" 
            "    }\n" 
            "}\n"
    </string>
</resources>