<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="code_wheel_picker">
        "/**\n"
                " * Created by XiaoMai on 2017/2/7 4:42.\n"
                " */\n"
                "public class WheelPickerView extends ScrollView {\n"
                "\n"
                "    public interface OnScrollListener {\n"
                "\n"
                "        void onSelected(int selectedIndex, String item);\n"
                "\n"
                "    }\n"
                "\n"
                "    public static final int SCROLL_DELAY = 50;\n"
                "\n"
                "    private Context mContext;\n"
                "\n"
                "    private LinearLayout mViewContainer;\n"
                "\n"
                "    private List&lt;String&gt; mItemList = new ArrayList&lt;String&gt;();\n"
                "\n"
                "    private int mItemOffset = 2;\n"
                "\n"
                "    private int mVisibleItemCount = 5;\n"
                "\n"
                "    private int mSelectedIndex = 1;\n"
                "\n"
                "    private int mInitialY = 0;\n"
                "\n"
                "    private int mItemHeight = 0;\n"
                "\n"
                "    private int mCurrentSound = 2;\n"
                "\n"
                "    private Paint mBgPaint;\n"
                "\n"
                "    private int mViewWidth;\n"
                "\n"
                "    private boolean mSoundEnabled = true;\n"
                "\n"
                "    private OnScrollListener mOnScrollListener;\n"
                "\n"
                "    private Runnable mScrollerTask;\n"
                "\n"
                "    public WheelPickerView(Context context) {\n"
                "        super(context);\n"
                "        init(context);\n"
                "    }\n"
                "\n"
                "    public WheelPickerView(Context context, AttributeSet attrs) {\n"
                "        super(context, attrs);\n"
                "        init(context);\n"
                "    }\n"
                "\n"
                "    public WheelPickerView(Context context, AttributeSet attrs, int defStyle) {\n"
                "        super(context, attrs, defStyle);\n"
                "        init(context);\n"
                "    }\n"
                "\n"
                "    @SuppressWarnings(\"deprecation\")\n"
                "    private void init(Context context) {\n"
                "        mContext = context;\n"
                "        setVerticalScrollBarEnabled(false);\n"
                "\n"
                "        WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);\n"
                "        mViewWidth = wm.getDefaultDisplay().getWidth();\n"
                "        mBgPaint = new Paint();\n"
                "        mBgPaint.setColor(getResources().getColor(R.color.wheel_select_text_color));\n"
                "        mBgPaint.setStrokeWidth(2);\n"
                "\n"
                "        mViewContainer = new LinearLayout(context);\n"
                "        mViewContainer.setOrientation(LinearLayout.VERTICAL);\n"
                "        addView(mViewContainer);\n"
                "\n"
                "        mScrollerTask = new Runnable() {\n"
                "            public void run() {\n"
                "                int newY = getScrollY();\n"
                "                if (mInitialY - newY != 0) {\n"
                "                    startScrollerTask();\n"
                "                    return;\n"
                "                }\n"
                "\n"
                "                final int remainder = mInitialY % mItemHeight;\n"
                "                final int divided = mInitialY / mItemHeight;\n"
                "                if (remainder == 0) {\n"
                "                    mSelectedIndex = divided + mItemOffset;\n"
                "                    onWheelItemSeleted();\n"
                "                } else {\n"
                "                    if (remainder &gt; mItemHeight / 2) {\n"
                "                        post(new Runnable() {\n"
                "                            @Override\n"
                "                            public void run() {\n"
                "                                smoothScrollTo(0, mInitialY - remainder + mItemHeight);\n"
                "                                mSelectedIndex = divided + mItemOffset + 1;\n"
                "                                onWheelItemSeleted();\n"
                "                            }\n"
                "                        });\n"
                "                    } else {\n"
                "                        post(new Runnable() {\n"
                "                            @Override\n"
                "                            public void run() {\n"
                "                                smoothScrollTo(0, mInitialY - remainder);\n"
                "                                mSelectedIndex = divided + mItemOffset;\n"
                "                                onWheelItemSeleted();\n"
                "                            }\n"
                "                        });\n"
                "                    }\n"
                "                }\n"
                "            }\n"
                "        };\n"
                "    }\n"
                "\n"
                "    private void startScrollerTask() {\n"
                "        mInitialY = getScrollY();\n"
                "        postDelayed(mScrollerTask, SCROLL_DELAY);\n"
                "    }\n"
                "\n"
                "    public void setItems(List&lt;String&gt; list) {\n"
                "        mItemList.clear();\n"
                "        mItemList.addAll(list);\n"
                "        for (int i = 0; i &lt; mItemOffset; i++) {\n"
                "            mItemList.add(0, \"\");\n"
                "            mItemList.add(\"\");\n"
                "        }\n"
                "\n"
                "        for (String item : mItemList) {\n"
                "            mViewContainer.addView(createWheelItem(item));\n"
                "        }\n"
                "        refreshItemView(0);\n"
                "    }\n"
                "\n"
                "    public void setItemOffset(int offset) {\n"
                "        mItemOffset = offset;\n"
                "        mVisibleItemCount = offset * 2 + 1;\n"
                "    }\n"
                "\n"
                "    public void setSelectedItem(int position) {\n"
                "        final int p = position;\n"
                "        mSelectedIndex = p + mItemOffset;\n"
                "        post(new Runnable() {\n"
                "            @Override\n"
                "            public void run() {\n"
                "                mSoundEnabled = false;\n"
                "                scrollTo(0, p * mItemHeight);\n"
                "                mSoundEnabled = true;\n"
                "                onWheelItemSeleted();\n"
                "            }\n"
                "        });\n"
                "    }\n"
                "\n"
                "    public void setSelectedItem(String item) {\n"
                "        setSelectedItem(0);\n"
                "        if (!TextUtils.isEmpty(item)) {\n"
                "            for (int i = 0; i &lt; mItemList.size() - mItemOffset * 2; i++) {\n"
                "                if (item.endsWith(mItemList.get(i + mItemOffset))) {\n"
                "                    setSelectedItem(i);\n"
                "                    break;\n"
                "                }\n"
                "            }\n"
                "        }\n"
                "    }\n"
                "\n"
                "    public void setOnScrollListener(OnScrollListener listener) {\n"
                "        mOnScrollListener = listener;\n"
                "    }\n"
                "\n"
                "    private TextView createWheelItem(String item) {\n"
                "        TextView textView = new TextView(mContext);\n"
                "        textView.setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,\n"
                "                ViewGroup.LayoutParams.WRAP_CONTENT));\n"
                "        textView.setSingleLine(true);\n"
                "        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);\n"
                "        textView.setText(item);\n"
                "        textView.setGravity(Gravity.CENTER);\n"
                "        int padding = getResources().getDimensionPixelSize(R.dimen.margin_large);\n"
                "        textView.setPadding(padding, padding, padding, padding);\n"
                "        if (mItemHeight == 0) {\n"
                "            mItemHeight = getViewMeasuredHeight(textView);\n"
                "            mViewContainer.setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,\n"
                "                    mItemHeight * mVisibleItemCount));\n"
                "            LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) getLayoutParams();\n"
                "            setLayoutParams(\n"
                "                    new LinearLayout.LayoutParams(lp.width, mItemHeight * mVisibleItemCount));\n"
                "        }\n"
                "        return textView;\n"
                "    }\n"
                "\n"
                "    @Override\n"
                "    protected void onScrollChanged(int l, int t, int oldl, int oldt) {\n"
                "        super.onScrollChanged(l, t, oldl, oldt);\n"
                "        refreshItemView(t);\n"
                "    }\n"
                "\n"
                "    private void refreshItemView(int y) {\n"
                "        int position = y / mItemHeight + mItemOffset;\n"
                "        int remainder = y % mItemHeight;\n"
                "        int divided = y / mItemHeight;\n"
                "\n"
                "        if (remainder == 0) {\n"
                "            position = divided + mItemOffset;\n"
                "        } else if (remainder &gt; mItemHeight / 2) {\n"
                "            position = divided + mItemOffset + 1;\n"
                "        }\n"
                "\n"
                "        int childSize = mViewContainer.getChildCount();\n"
                "        for (int i = 0; i &lt; childSize; i++) {\n"
                "            TextView itemView = (TextView) mViewContainer.getChildAt(i);\n"
                "            if (itemView == null) {\n"
                "                return;\n"
                "            }\n"
                "            if (position == i) {\n"
                "                if (mSoundEnabled &amp;&amp; mCurrentSound != position) {\n"
                "                    mCurrentSound = position;\n"
                "                    playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);\n"
                "                }\n"
                "                itemView.setTextColor(getResources().getColor(R.color.wheel_select_text_color));\n"
                "            } else {\n"
                "                itemView.setTextColor(getResources().getColor(R.color.wheel_normal_text_color));\n"
                "            }\n"
                "        }\n"
                "        onWheelItemSeleted();\n"
                "    }\n"
                "\n"
                "    @SuppressWarnings(\"deprecation\")\n"
                "    @Override\n"
                "    public void setBackgroundDrawable(Drawable background) {\n"
                "        background = new Drawable() {\n"
                "            @Override\n"
                "            public void draw(Canvas canvas) {\n"
                "                int startY = mItemHeight * mItemOffset;\n"
                "                int endY = mItemHeight * (mItemOffset + 1);\n"
                "                canvas.drawLine(mViewWidth * 1 / 6, startY, mViewWidth * 5 / 6, startY, mBgPaint);\n"
                "                canvas.drawLine(mViewWidth * 1 / 6, endY, mViewWidth * 5 / 6, endY, mBgPaint);\n"
                "            }\n"
                "\n"
                "            @Override\n"
                "            public void setAlpha(int alpha) {\n"
                "            }\n"
                "\n"
                "            @Override\n"
                "            public void setColorFilter(ColorFilter cf) {\n"
                "            }\n"
                "\n"
                "            @Override\n"
                "            public int getOpacity() {\n"
                "                return 0;\n"
                "            }\n"
                "        };\n"
                "        super.setBackgroundDrawable(background);\n"
                "    }\n"
                "\n"
                "    @Override\n"
                "    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n"
                "        super.onSizeChanged(w, h, oldw, oldh);\n"
                "        mViewWidth = w;\n"
                "        setBackgroundDrawable(null);\n"
                "    }\n"
                "\n"
                "    private void onWheelItemSeleted() {\n"
                "        if (mOnScrollListener != null) {\n"
                "            mOnScrollListener.onSelected(mSelectedIndex - mItemOffset,\n"
                "                    mItemList.get(mSelectedIndex));\n"
                "        }\n"
                "    }\n"
                "\n"
                "    @Override\n"
                "    public void fling(int velocityY) {\n"
                "        super.fling(velocityY / 2);\n"
                "    }\n"
                "\n"
                "    @Override\n"
                "    public boolean onTouchEvent(MotionEvent ev) {\n"
                "        if (ev.getAction() == MotionEvent.ACTION_UP) {\n"
                "            startScrollerTask();\n"
                "        }\n"
                "        return super.onTouchEvent(ev);\n"
                "    }\n"
                "\n"
                "    private int getViewMeasuredHeight(View view) {\n"
                "        int width = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);\n"
                "        int expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; 2,\n"
                "                MeasureSpec.AT_MOST);\n"
                "        view.measure(width, expandSpec);\n"
                "        return view.getMeasuredHeight();\n"
                "    }\n"
                "}\n"
    </string>
</resources>