<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="code_runtime_permission">
            "\n" 
            "package com.xiaomai.myproject.activity;\n" 
            "\n" 
            "import android.Manifest;\n" 
            "import android.content.Context;\n" 
            "import android.content.Intent;\n" 
            "import android.content.pm.PackageManager;\n" 
            "import android.net.Uri;\n" 
            "import android.os.Build;\n" 
            "import android.os.Environment;\n" 
            "import android.os.storage.StorageManager;\n" 
            "import android.support.annotation.NonNull;\n" 
            "import android.support.v4.app.ActivityCompat;\n" 
            "import android.support.v4.content.ContextCompat;\n" 
            "import android.util.SparseArray;\n" 
            "import android.view.View;\n" 
            "import android.widget.Button;\n" 
            "\n" 
            "import com.xiaomai.myproject.R;\n" 
            "import com.xiaomai.myproject.base.BaseActivity;\n" 
            "import com.xiaomai.myproject.utils.FileUtils;\n" 
            "import com.xiaomai.myproject.view.MyToast;\n" 
            "\n" 
            "import java.lang.reflect.InvocationTargetException;\n" 
            "\n" 
            "import rx.Observable;\n" 
            "import rx.Subscriber;\n" 
            "import rx.android.schedulers.AndroidSchedulers;\n" 
            "import rx.functions.Action1;\n" 
            "import rx.schedulers.Schedulers;\n" 
            "\n" 
            "public class RuntimePermissionActivity extends BaseActivity implements View.OnClickListener {\n" 
            "\n" 
            "    private static final int REQUEST_CODE_CALL = 0x0001;\n" 
            "\n" 
            "    private static final int REQUEST_CODE_FILE = 0x0002;\n" 
            "\n" 
            "    private Button bt_permission_call;\n" 
            "\n" 
            "    private Button bt_permission_file;\n" 
            "\n" 
            "    @Override\n" 
            "    protected int getContentLayout() {\n" 
            "        return R.layout.activity_runtime_permission;\n" 
            "    }\n" 
            "\n" 
            "    @Override\n" 
            "    protected void initViews() {\n" 
            "        super.initViews();\n" 
            "        bt_permission_call = (Button) findViewById(R.id.bt_permission_call);\n" 
            "        bt_permission_file = (Button) findViewById(R.id.bt_permission_file);\n" 
            "        bt_permission_call.setOnClickListener(this);\n" 
            "        bt_permission_file.setOnClickListener(this);\n" 
            "    }\n" 
            "\n" 
            "    @Override\n" 
            "    public void onClick(View v) {\n" 
            "        switch (v.getId()) {\n" 
            "            case R.id.bt_permission_call:\n" 
            "                if (ContextCompat.checkSelfPermission(this,\n" 
            "                        Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {\n" 
            "                    ActivityCompat.requestPermissions(this, new String[] {\n" 
            "                            Manifest.permission.CALL_PHONE\n" 
            "                    }, REQUEST_CODE_CALL);\n" 
            "                } else {\n" 
            "                    call();\n" 
            "                }\n" 
            "                break;\n" 
            "            case R.id.bt_permission_file:\n" 
            "                if (ContextCompat.checkSelfPermission(this,\n" 
            "                        Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n" 
            "                    ActivityCompat.requestPermissions(this, new String[] {\n" 
            "                            Manifest.permission.WRITE_EXTERNAL_STORAGE\n" 
            "                    }, REQUEST_CODE_FILE);\n" 
            "                } else {\n" 
            "                    copyFile();\n" 
            "                }\n" 
            "                break;\n" 
            "        }\n" 
            "    }\n" 
            "    private void copyFile() {\n" 
            "        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n" 
            "            getExternalFilesDirs(null);\n" 
            "        }\n" 
            "        Observable.create(new Observable.OnSubscribe&lt;Boolean&gt;() {\n" 
            "            @Override\n" 
            "            public void call(Subscriber&lt;? super Boolean> subscriber) {\n" 
            "                boolean copy = FileUtils.copy(Environment.getExternalStorageDirectory().getPath() + \"/1.jpg\",\n" 
            "                        scanStorage().get(1) +  \"/Android/data/\" + getPackageName() + \"/files/1.jpg\", true);\n" 
            "                subscriber.onNext(copy);\n" 
            "                subscriber.onCompleted();\n" 
            "            }\n" 
            "        }).\n" 
            "                subscribeOn(Schedulers.io())\n" 
            "                .observeOn(AndroidSchedulers.mainThread())\n" 
            "                .subscribe(new Action1&lt;Boolean&gt;() {\n" 
            "                    @Override\n" 
            "                    public void call(Boolean bool) {\n" 
            "                        if (bool) MyToast.show(mContext, \"拷贝成功\");\n" 
            "                        else MyToast.show(mContext, \"拷贝失败\");\n" 
            "                    }\n" 
            "                });\n" 
            "    }\n" 
            "\n" 
            "    /**\n" 
            "     * 扫描存储设备\n" 
            "     *\n" 
            "     * @return\n" 
            "     */\n" 
            "    private SparseArray&lt;String&gt; scanStorage() {\n" 
            "        SparseArray&lt;String&gt; sparseArray = new SparseArray&lt;&gt;();\n" 
            "//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n" 
            "//            // 这种方式获取到的都是Android/data/[包名]目录/files\n" 
            "//            File[] externalFilesDirs = getExternalFilesDirs(null);\n" 
            "//            if (externalFilesDirs == null) {\n" 
            "//                return sparseArray;\n" 
            "//            } else {\n" 
            "//                for (int i = 0; i &lt; externalFilesDirs.length; i++) {\n" 
            "//                    sparseArray.append(i, externalFilesDirs[i].getAbsolutePath());\n" 
            "//                    // /storage/emulated/0/Android/data/com.xiaomai.myproject/files\n" 
            "//                    // /storage/extSdCard/Android/data/com.xiaomai.myproject/files\n" 
            "//                }\n" 
            "//            }\n" 
            "//            return sparseArray;\n" 
            "//        }\n" 
            "\n" 
            "        final StorageManager storageManager = (StorageManager) getSystemService(\n" 
            "                Context.STORAGE_SERVICE);\n" 
            "        try {\n" 
            "            String[] paths = (String[]) storageManager.getClass().getMethod(\"getVolumePaths\")\n" 
            "                    .invoke(storageManager);\n" 
            "            for (int i = 0; i &lt; paths.length; i++) {\n" 
            "                String status = (String) storageManager.getClass()\n" 
            "                        .getMethod(\"getVolumeState\", String.class).invoke(storageManager, paths[i]);\n" 
            "                if (Environment.MEDIA_MOUNTED.equals(status)) {\n" 
            "                    sparseArray.append(i, paths[i]);\n" 
            "                }\n" 
            "            }\n" 
            "        } catch (IllegalAccessException e) {\n" 
            "            e.printStackTrace();\n" 
            "        } catch (InvocationTargetException e) {\n" 
            "            e.printStackTrace();\n" 
            "        } catch (NoSuchMethodException e) {\n" 
            "            e.printStackTrace();\n" 
            "        }\n" 
            "        return sparseArray;\n" 
            "    }\n" 
            "\n" 
            "    private void call() {\n" 
            "        Intent intent = new Intent(Intent.ACTION_CALL);\n" 
            "        intent.setData(Uri.parse(\"tel:10086\"));\n" 
            "        startActivity(intent);\n" 
            "    }\n" 
            "\n" 
            "    @Override\n" 
            "    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,\n" 
            "            @NonNull int[] grantResults) {\n" 
            "        switch (requestCode) {\n" 
            "            case REQUEST_CODE_CALL:\n" 
            "                if (grantResults.length > 0\n" 
            "                        &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n" 
            "                    call();\n" 
            "                } else {\n" 
            "                    MyToast.show(this, \"你拒绝了我！\");\n" 
            "                }\n" 
            "                break;\n" 
            "            case REQUEST_CODE_FILE:\n" 
            "                if (grantResults.length > 0\n" 
            "                        &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n" 
            "                    copyFile();\n" 
            "                } else {\n" 
            "                    MyToast.show(this, \"你拒绝了我！\");\n" 
            "                }\n" 
            "                break;\n" 
            "        }\n" 
            "    }\n" 
            "}\n"
    </string>
</resources>